--- fork.c	2021-05-23 16:46:08.000000000 +0200
+++ fork_mina.c	2021-05-23 20:19:06.177714019 +0200
@@ -2384,7 +2384,9 @@
  * it and waits for it to finish using the VM if required.
  *
  * args->exit_signal is expected to be checked for sanity by the caller.
+ *
  */
+
 long _do_fork(struct kernel_clone_args *args)
 {
 	u64 clone_flags = args->flags;
@@ -2464,7 +2466,106 @@
 	put_pid(pid);
 	return nr;
 }
+/*---------------------------------------------------------------------------------------*/
+long _do_minafork(struct kernel_clone_args *args)
+{
+	u64 clone_flags = args->flags;
+	struct completion vfork;
+	struct pid *pid;
+/*--*/	struct pid *pid2;
+/*--*/  struct task_struct *p2;
+	struct task_struct *p;
+	int trace = 0;
+	long nr;
+/*--*/  long nr2; 
+	/*
+	 * For legacy clone() calls, CLONE_PIDFD uses the parent_tid argument
+	 * to return the pidfd. Hence, CLONE_PIDFD and CLONE_PARENT_SETTID are
+	 * mutually exclusive. With clone3() CLONE_PIDFD has grown a separate
+	 * field in struct clone_args and it still doesn't make sense to have
+	 * them both point at the same memory location. Performing this check
+	 * here has the advantage that we don't need to have a separate helper
+	 * to check for legacy clone().
+	 */
+	if ((args->flags & CLONE_PIDFD) &&
+	    (args->flags & CLONE_PARENT_SETTID) &&
+	    (args->pidfd == args->parent_tid))
+		return -EINVAL;
+
+	/*
+	 * Determine whether and which event to report to ptracer.  When
+	 * called from kernel_thread or CLONE_UNTRACED is explicitly
+	 * requested, no event is reported; otherwise, report if the event
+	 * for the type of forking is enabled.
+	 */
+	if (!(clone_flags & CLONE_UNTRACED)) {
+		if (clone_flags & CLONE_VFORK)
+			trace = PTRACE_EVENT_VFORK;
+		else if (args->exit_signal != SIGCHLD)
+			trace = PTRACE_EVENT_CLONE;
+		else
+			trace = PTRACE_EVENT_FORK;
+
+		if (likely(!ptrace_event_enabled(current, trace)))
+			trace = 0;
+	}
+
+	p = copy_process(NULL, trace, NUMA_NO_NODE, args);
+	add_latent_entropy();
+
+
+/*--*/	p2 = copy_process(NULL, trace, NUMA_NO_NODE, args);
+
+	if (IS_ERR(p))
+		return PTR_ERR(p);
+
+	/*
+	 * Do this prior waking up the new thread - the thread pointer
+	 * might get invalid after that point, if the thread exits quickly.
+	 */
+	trace_sched_process_fork(current, p);
+
+	pid = get_task_pid(p, PIDTYPE_PID);
+	nr = pid_vnr(pid);
+	
+	pid2 = get_task_pid2(p2, PIDTYPE_PID);
+	nr2 = pid_vnr(pid2);
+	
+	p -> pfork_standby_pid =nr2 ;
+	p -> pfork_active_pid = 1;
+	p -> pfork_status = 0;		
+
+	
+	p2 -> pfork_standby_pid =1 ;
+	p2 -> pfork_active_pid = nr;
+	p2 -> pfork_status = 0;		
+
+
+	if (clone_flags & CLONE_PARENT_SETTID)
+		put_user(nr, args->parent_tid);
 
+	if (clone_flags & CLONE_VFORK) {
+		p->vfork_done = &vfork;
+		init_completion(&vfork);
+		get_task_struct(p);
+	}
+
+	wake_up_new_task(p);
+
+/*--*/	struct pid *minam = find_vpid(nr2);
+/*--*/	kill_pid (minam, SIGSTOP,1);
+
+	/* forking complete and child started to run, tell ptracer */
+	if (unlikely(trace))
+		ptrace_event_pid(trace, pid);
+
+	if (clone_flags & CLONE_VFORK) {
+		if (!wait_for_vfork_done(p, &vfork))
+			ptrace_event_pid(PTRACE_EVENT_VFORK_DONE, pid);
+	}
+
+	put_pid(pid);
+	return nr;
 /*
  * Create a kernel thread.
  */
@@ -2480,7 +2581,7 @@
 
 	return _do_fork(&args);
 }
-
+/*----------------------------------------------------------------*/
 #ifdef __ARCH_WANT_SYS_FORK
 SYSCALL_DEFINE0(fork)
 {
@@ -2497,9 +2598,73 @@
 }
 #endif
 
+/*-----------------------------------------------------------------*/
+
+#ifdef __ARCH_WANT_SYS_PFORK
+SYSCALL_DEFINE0(pfork)
+{
+#ifdef CONFIG_MMU
+	struct kernel_clone_args args = {
+		.exit_signal = SIGCHLD,
+	};
+
+	return _do_minafork(&args);
+#else
+	/* can not support in nommu mode */
+	return -EINVAL;
+#endif
+}
+#endif
+
+/*----------------------------------------------------------------*/
+
+
+SYSCALL_DEFINE1(set_pfork_status,int, status)
+{
+current -> pfork_status = status;
+}
+
+/*----------------------------------------------------------------*/
+
+
+SYSCALL_DEFINE0(get_pfork_sibling_pid)
+{	if (pfork_active_pid == 1){
+	     
+	return current -> pfork_standby_pid; 
+	     }
+	else
+	return current -> pfork_active_pid ;
+
+}
+
+
+
+/*-----------------------------------------------------------------*/
+
+
+SYSCALL_DEFINE0(pfork_who)
+{
+	if (pfork_active_pid == 1)
+		return 1;
+	else (pfork_standby_pid==1)
+		return 2;
+	else 
+		return 0; 
+}
+
+/*-----------------------------------------------------------------*/
+
+
+SYSCALL_DEFINE0(get_pfork_status)
+{
+return current-> pfork_status;
+}
+
+
+/*-----------------------------------------------------------------*/
 #ifdef __ARCH_WANT_SYS_VFORK
 SYSCALL_DEFINE0(vfork)
-{
+
 	struct kernel_clone_args args = {
 		.flags		= CLONE_VFORK | CLONE_VM,
 		.exit_signal	= SIGCHLD,
